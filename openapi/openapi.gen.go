// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"time"

	"github.com/samber/mo"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ResponseErrorCode.
const (
	ResponseErrorCodeAccountAlreadyExists ResponseErrorCode = "ACCOUNT_ALREADY_EXISTS"
	ResponseErrorCodeAccountNotFound      ResponseErrorCode = "ACCOUNT_NOT_FOUND"
	ResponseErrorCodeBadRequest           ResponseErrorCode = "BAD_REQUEST"
	ResponseErrorCodeDiaryKeyNotFound     ResponseErrorCode = "DIARY_KEY_NOT_FOUND"
	ResponseErrorCodeDiaryLimitExceeded   ResponseErrorCode = "DIARY_LIMIT_EXCEEDED"
	ResponseErrorCodeDiaryNotFound        ResponseErrorCode = "DIARY_NOT_FOUND"
	ResponseErrorCodeEntryNotFound        ResponseErrorCode = "ENTRY_NOT_FOUND"
	ResponseErrorCodeForbidden            ResponseErrorCode = "FORBIDDEN"
	ResponseErrorCodeInternalServerError  ResponseErrorCode = "INTERNAL_SERVER_ERROR"
	ResponseErrorCodeInvalidCredentials   ResponseErrorCode = "INVALID_CREDENTIALS"
	ResponseErrorCodeInvalidSignature     ResponseErrorCode = "INVALID_SIGNATURE"
	ResponseErrorCodeRateLimitExceeded    ResponseErrorCode = "RATE_LIMIT_EXCEEDED"
	ResponseErrorCodeTemplateNotFound     ResponseErrorCode = "TEMPLATE_NOT_FOUND"
	ResponseErrorCodeTopicNotFound        ResponseErrorCode = "TOPIC_NOT_FOUND"
	ResponseErrorCodeUnauthorized         ResponseErrorCode = "UNAUTHORIZED"
	ResponseErrorCodeVersionConflict      ResponseErrorCode = "VERSION_CONFLICT"
	ResponseErrorCodeVersionTooHigh       ResponseErrorCode = "VERSION_TOO_HIGH"
	ResponseErrorCodeVersionTooLow        ResponseErrorCode = "VERSION_TOO_LOW"
)

// CreateDiaryRequest Request to create a new diary
type CreateDiaryRequest struct {
	// Details Container for encrypted data with nonce
	Details EncryptedData `json:"details"`

	// EncryptedDiaryKey Diary key encrypted with user's public key (envelope encryption) (<base64_encoded>)
	EncryptedDiaryKey []byte `json:"encrypted_diary_key"`

	// Encryption Encryption metadata for diary content (diary_key_id will be generated by server)
	Encryption struct {
		// EncryptedKeyData Encrypted symmetric key data (<base64_encoded>)
		EncryptedKeyData []byte `json:"encrypted_key_data"`

		// EncryptedKeyNonce Nonce for key encryption (<base64_encoded>)
		EncryptedKeyNonce []byte `json:"encrypted_key_nonce"`
	} `json:"encryption"`
}

// CreateDiaryResponse defines model for CreateDiaryResponse.
type CreateDiaryResponse struct {
	// Diary A diary containing encrypted entries, topics, and templates
	Diary Diary `json:"diary"`
}

// Diary A diary containing encrypted entries, topics, and templates
type Diary struct {
	// CreatedAt Timestamp when the diary was created
	CreatedAt time.Time `json:"created_at"`

	// Details Container for encrypted data with nonce
	Details EncryptedData `json:"details"`

	// Encryption Encryption metadata for diary content
	Encryption DiaryEncryption `json:"encryption"`

	// EncryptionKeys List of encryption keys for accessing diary content
	EncryptionKeys []*DiaryEncryptionKey `json:"encryption_keys"`

	// Id Unique identifier for a diary
	Id DiaryID `json:"id"`

	// UpdatedAt Timestamp when the diary was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Version Version number for optimistic concurrency control.
	// Must be a Unix timestamp in milliseconds.
	// Valid range: 2020-01-01 (1577836800000) to 2100-01-01 (4102444800000).
	// Prevents conflicts during concurrent editing and supports offline scenarios.
	Version uint64 `json:"version"`
}

// DiaryEncryption Encryption metadata for diary content
type DiaryEncryption struct {
	// DiaryKeyId Unique identifier for a diary encryption key
	DiaryKeyId DiaryKeyID `json:"diary_key_id"`

	// EncryptedKeyData Encrypted symmetric key data (<base64_encoded>)
	EncryptedKeyData []byte `json:"encrypted_key_data"`

	// EncryptedKeyNonce Nonce for key encryption (<base64_encoded>)
	EncryptedKeyNonce []byte `json:"encrypted_key_nonce"`
}

// DiaryEncryptionKey Encryption key for diary content access
type DiaryEncryptionKey struct {
	// Id Unique identifier for a diary encryption key
	Id DiaryKeyID `json:"id"`

	// Value Encrypted key data (<base64_encoded>)
	Value []byte `json:"value"`
}

// DiaryID Unique identifier for a diary
type DiaryID = string

// DiaryKeyID Unique identifier for a diary encryption key
type DiaryKeyID = string

// EncryptedData Container for encrypted data with nonce
type EncryptedData struct {
	// Data Encrypted data payload (<base64_encoded>)
	Data []byte `json:"data"`

	// Nonce Cryptographic nonce for encryption (<base64_encoded>)
	Nonce []byte `json:"nonce"`
}

// Entry A diary entry containing encrypted content
type Entry struct {
	// CreatedAt Timestamp when the entry was created
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt Timestamp when the entry was deleted (null if not deleted)
	DeletedAt mo.Option[time.Time] `json:"deleted_at"`

	// Details Container for encrypted data with nonce
	Details EncryptedData `json:"details"`

	// DiaryId Unique identifier for a diary
	DiaryId DiaryID `json:"diary_id"`

	// Encryption Encryption metadata for diary content
	Encryption DiaryEncryption `json:"encryption"`

	// Id Unique identifier for a diary entry
	Id EntryID `json:"id"`

	// TopicId Optional topic ID to categorize the entry (null if no topic assigned)
	TopicId mo.Option[TopicID] `json:"topic_id"`

	// UpdatedAt Timestamp when the entry was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Version Version number for optimistic concurrency control.
	// Must be a Unix timestamp in milliseconds.
	// Valid range: 2020-01-01 (1577836800000) to 2100-01-01 (4102444800000).
	// Prevents conflicts during concurrent editing and supports offline scenarios.
	Version uint64 `json:"version"`
}

// EntryID Unique identifier for a diary entry
type EntryID = string

// ErrorResponse Standard error response format
type ErrorResponse struct {
	// ErrorCode Error codes for API responses
	ErrorCode ResponseErrorCode `json:"error_code"`

	// ErrorReason Optional detailed error message (null when not provided)
	ErrorReason mo.Option[string] `json:"error_reason"`
}

// GetDiariesResponse defines model for GetDiariesResponse.
type GetDiariesResponse struct {
	// Diaries Array of diary objects
	Diaries []*Diary `json:"diaries"`

	// NextPageToken Token for retrieving the next page of results (null when no more pages)
	NextPageToken mo.Option[string] `json:"next_page_token"`
}

// GetDiaryResponse defines model for GetDiaryResponse.
type GetDiaryResponse struct {
	// Diary A diary containing encrypted entries, topics, and templates
	Diary Diary `json:"diary"`
}

// GetEntriesResponse defines model for GetEntriesResponse.
type GetEntriesResponse struct {
	// Entries Array of entry objects
	Entries []*Entry `json:"entries"`

	// NextPageToken Token for retrieving the next page of results (null when no more pages)
	NextPageToken mo.Option[string] `json:"next_page_token"`
}

// GetEntryResponse defines model for GetEntryResponse.
type GetEntryResponse struct {
	// Entry A diary entry containing encrypted content
	Entry Entry `json:"entry"`
}

// GetTemplateResponse defines model for GetTemplateResponse.
type GetTemplateResponse struct {
	// Template A reusable template for creating structured diary entries
	Template Template `json:"template"`
}

// GetTemplatesResponse defines model for GetTemplatesResponse.
type GetTemplatesResponse struct {
	// NextPageToken Token for retrieving the next page of results (optional)
	NextPageToken mo.Option[string] `json:"next_page_token,omitempty"`

	// Templates Array of template objects
	Templates []*Template `json:"templates"`
}

// GetTopicResponse defines model for GetTopicResponse.
type GetTopicResponse struct {
	// Topic A topic for organizing and categorizing diary entries
	Topic Topic `json:"topic"`
}

// GetTopicsResponse defines model for GetTopicsResponse.
type GetTopicsResponse struct {
	// NextPageToken Token for retrieving the next page of results (optional)
	NextPageToken mo.Option[string] `json:"next_page_token,omitempty"`

	// Topics Array of topic objects
	Topics []*Topic `json:"topics"`
}

// LoginRequest Login credentials for authentication
type LoginRequest struct {
	// Login User login identifier (email or username)
	Login string `json:"login"`

	// Password User password
	Password string `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// ChallengeId Unique identifier for the authentication challenge
	ChallengeId string `json:"challenge_id"`

	// Nonce Random nonce for challenge signing (<base64_encoded>)
	Nonce []byte `json:"nonce"`
}

// LoginVerifyRequest Request to verify login challenge with signed nonce
type LoginVerifyRequest struct {
	// ChallengeId Challenge identifier from login response
	ChallengeId string `json:"challenge_id"`

	// SignedNonce Cryptographic signature of the challenge nonce (<base64_encoded>)
	SignedNonce []byte `json:"signed_nonce"`
}

// LoginVerifyResponse defines model for LoginVerifyResponse.
type LoginVerifyResponse struct {
	// Token JWT authentication token for API access
	Token string `json:"token"`
}

// PutDiaryRequest Request to update an existing diary
type PutDiaryRequest struct {
	// Details Container for encrypted data with nonce
	Details EncryptedData `json:"details"`

	// Encryption Encryption metadata for diary content
	Encryption DiaryEncryption `json:"encryption"`

	// Version Version number for optimistic concurrency control.
	// Must be a Unix timestamp in milliseconds.
	// Valid range: 2020-01-01 (1577836800000) to 2100-01-01 (4102444800000).
	// Prevents conflicts during concurrent editing and supports offline scenarios.
	Version uint64 `json:"version"`
}

// PutDiaryResponse defines model for PutDiaryResponse.
type PutDiaryResponse struct {
	// Diary A diary containing encrypted entries, topics, and templates
	Diary Diary `json:"diary"`
}

// PutEntryRequest Request to create or update a diary entry
type PutEntryRequest struct {
	// Details Container for encrypted data with nonce
	Details EncryptedData `json:"details"`

	// Encryption Encryption metadata for diary content
	Encryption DiaryEncryption `json:"encryption"`

	// Preview Container for encrypted data with nonce
	Preview EncryptedData `json:"preview"`

	// TopicId Optional topic ID to categorize the entry (null if no topic assigned)
	TopicId mo.Option[TopicID] `json:"topic_id"`

	// Version Version number for optimistic concurrency control.
	// Must be a Unix timestamp in milliseconds.
	// Valid range: 2020-01-01 (1577836800000) to 2100-01-01 (4102444800000).
	// Prevents conflicts during concurrent editing and supports offline scenarios.
	Version uint64 `json:"version"`
}

// PutEntryResponse defines model for PutEntryResponse.
type PutEntryResponse struct {
	// Entry A diary entry containing encrypted content
	Entry Entry `json:"entry"`
}

// PutTemplateRequest Request to create or update a template
type PutTemplateRequest struct {
	// Details Container for encrypted data with nonce
	Details EncryptedData `json:"details"`

	// Encryption Encryption metadata for diary content
	Encryption DiaryEncryption `json:"encryption"`

	// Version Version number for optimistic concurrency control.
	// Must be a Unix timestamp in milliseconds.
	// Valid range: 2020-01-01 (1577836800000) to 2100-01-01 (4102444800000).
	// Prevents conflicts during concurrent editing and supports offline scenarios.
	Version uint64 `json:"version"`
}

// PutTemplateResponse defines model for PutTemplateResponse.
type PutTemplateResponse struct {
	// Template A reusable template for creating structured diary entries
	Template Template `json:"template"`
}

// PutTopicRequest Request to create or update a topic
type PutTopicRequest struct {
	// DefaultTemplateId Optional default template ID for entries created in this topic
	DefaultTemplateId mo.Option[TemplateID] `json:"default_template_id"`

	// Details Container for encrypted data with nonce
	Details EncryptedData `json:"details"`

	// Encryption Encryption metadata for diary content
	Encryption DiaryEncryption `json:"encryption"`

	// Version Version number for optimistic concurrency control.
	// Must be a Unix timestamp in milliseconds.
	// Valid range: 2020-01-01 (1577836800000) to 2100-01-01 (4102444800000).
	// Prevents conflicts during concurrent editing and supports offline scenarios.
	Version uint64 `json:"version"`
}

// PutTopicResponse defines model for PutTopicResponse.
type PutTopicResponse struct {
	// Topic A topic for organizing and categorizing diary entries
	Topic Topic `json:"topic"`
}

// RegisterRequest Request to register a new user account
type RegisterRequest struct {
	// EncryptionPublicKey Public key for data encryption (<base64_encoded>)
	EncryptionPublicKey []byte `json:"encryption_public_key"`

	// Login Unique login identifier (email or username)
	Login string `json:"login"`

	// Password User password for authentication
	Password string `json:"password"`

	// SignaturePublicKey Public key for signature verification (<base64_encoded>)
	SignaturePublicKey []byte `json:"signature_public_key"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	// Token JWT authentication token for API access
	Token string `json:"token"`
}

// Response defines model for Response.
type Response = map[string]interface{}

// ResponseErrorCode Error codes for API responses
type ResponseErrorCode string

// Template A reusable template for creating structured diary entries
type Template struct {
	// CreatedAt Timestamp when the template was created
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt Timestamp when the template was deleted (null if not deleted)
	DeletedAt mo.Option[time.Time] `json:"deleted_at"`

	// Details Container for encrypted data with nonce
	Details EncryptedData `json:"details"`

	// DiaryId Unique identifier for a diary
	DiaryId DiaryID `json:"diary_id"`

	// Encryption Encryption metadata for diary content
	Encryption DiaryEncryption `json:"encryption"`

	// Id Unique identifier for a diary template
	Id TemplateID `json:"id"`

	// UpdatedAt Timestamp when the template was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Version Version number for optimistic concurrency control.
	// Must be a Unix timestamp in milliseconds.
	// Valid range: 2020-01-01 (1577836800000) to 2100-01-01 (4102444800000).
	// Prevents conflicts during concurrent editing and supports offline scenarios.
	Version uint64 `json:"version"`
}

// TemplateID Unique identifier for a diary template
type TemplateID = string

// Topic A topic for organizing and categorizing diary entries
type Topic struct {
	// CreatedAt Timestamp when the topic was created
	CreatedAt time.Time `json:"created_at"`

	// DefaultTemplateId Optional default template ID that will be applied to new entries in this topic
	DefaultTemplateId mo.Option[TemplateID] `json:"default_template_id"`

	// DeletedAt Timestamp when the topic was deleted (null if not deleted)
	DeletedAt mo.Option[time.Time] `json:"deleted_at"`

	// Details Container for encrypted data with nonce
	Details EncryptedData `json:"details"`

	// DiaryId Unique identifier for a diary
	DiaryId DiaryID `json:"diary_id"`

	// Encryption Encryption metadata for diary content
	Encryption DiaryEncryption `json:"encryption"`

	// Id Unique identifier for a diary topic
	Id TopicID `json:"id"`

	// UpdatedAt Timestamp when the topic was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Version Version number for optimistic concurrency control.
	// Must be a Unix timestamp in milliseconds.
	// Valid range: 2020-01-01 (1577836800000) to 2100-01-01 (4102444800000).
	// Prevents conflicts during concurrent editing and supports offline scenarios.
	Version uint64 `json:"version"`
}

// TopicID Unique identifier for a diary topic
type TopicID = string

// XSignature defines model for X-Signature.
type XSignature = []byte

// GetDiariesParams defines parameters for GetDiaries.
type GetDiariesParams struct {
	// NextPageToken Token for pagination to retrieve the next page of results
	NextPageToken *string `form:"next_page_token,omitempty" json:"next_page_token,omitempty"`
}

// CreateDiaryParams defines parameters for CreateDiary.
type CreateDiaryParams struct {
	// XSignature Ed25519 signature of the request body, base64 encoded.
	// Generated using the account's private signing key.
	XSignature XSignature `json:"X-Signature"`
}

// GetDiaryByIdParams defines parameters for GetDiaryById.
type GetDiaryByIdParams struct {
	// NextPageToken Token for pagination to retrieve the next page of results
	NextPageToken *string `form:"next_page_token,omitempty" json:"next_page_token,omitempty"`
}

// PutDiaryParams defines parameters for PutDiary.
type PutDiaryParams struct {
	// XSignature Ed25519 signature of the request body, base64 encoded.
	// Generated using the account's private signing key.
	XSignature XSignature `json:"X-Signature"`
}

// GetEntriesParams defines parameters for GetEntries.
type GetEntriesParams struct {
	// NextPageToken Token for pagination to retrieve the next page of results
	NextPageToken *string `form:"next_page_token,omitempty" json:"next_page_token,omitempty"`
}

// PutEntryParams defines parameters for PutEntry.
type PutEntryParams struct {
	// XSignature Ed25519 signature of the request body, base64 encoded.
	// Generated using the account's private signing key.
	XSignature XSignature `json:"X-Signature"`
}

// GetTemplatesParams defines parameters for GetTemplates.
type GetTemplatesParams struct {
	// NextPageToken Token for pagination to retrieve the next page of results
	NextPageToken *string `form:"next_page_token,omitempty" json:"next_page_token,omitempty"`
}

// PutTemplateParams defines parameters for PutTemplate.
type PutTemplateParams struct {
	// XSignature Ed25519 signature of the request body, base64 encoded.
	// Generated using the account's private signing key.
	XSignature XSignature `json:"X-Signature"`
}

// GetTopicsParams defines parameters for GetTopics.
type GetTopicsParams struct {
	// NextPageToken Token for pagination to retrieve the next page of results
	NextPageToken *string `form:"next_page_token,omitempty" json:"next_page_token,omitempty"`
}

// DeleteTopicParams defines parameters for DeleteTopic.
type DeleteTopicParams struct {
	// DeleteEntries If true, deletes all entries in the topic. If false or omitted, entries are unlinked from the topic but preserved.
	// Only accepts strict lowercase "true" or "false". Any other value (including "1", "TRUE", "yes") will be treated as false.
	DeleteEntries *bool `form:"delete_entries,omitempty" json:"delete_entries,omitempty"`
}

// PutTopicParams defines parameters for PutTopic.
type PutTopicParams struct {
	// XSignature Ed25519 signature of the request body, base64 encoded.
	// Generated using the account's private signing key.
	XSignature XSignature `json:"X-Signature"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// LoginVerifyJSONRequestBody defines body for LoginVerify for application/json ContentType.
type LoginVerifyJSONRequestBody = LoginVerifyRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequest

// CreateDiaryJSONRequestBody defines body for CreateDiary for application/json ContentType.
type CreateDiaryJSONRequestBody = CreateDiaryRequest

// PutDiaryJSONRequestBody defines body for PutDiary for application/json ContentType.
type PutDiaryJSONRequestBody = PutDiaryRequest

// PutEntryJSONRequestBody defines body for PutEntry for application/json ContentType.
type PutEntryJSONRequestBody = PutEntryRequest

// PutTemplateJSONRequestBody defines body for PutTemplate for application/json ContentType.
type PutTemplateJSONRequestBody = PutTemplateRequest

// PutTopicJSONRequestBody defines body for PutTopic for application/json ContentType.
type PutTopicJSONRequestBody = PutTopicRequest
